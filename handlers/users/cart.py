from aiogram import types
from aiogram.dispatcher import FSMContext
import requests
import math
import os

from loader import dp, db, bot2, bot
from keyboards.default.markup import delivery_or_pick_up_markup, uz, ru, back_markup, back_uz, back_ru, menu_markup, cart_markup, correct_delivery_markup, location_markup, delivery_or_pick_up_markup, buy_markup,yes_or_no_markup, remove_keyboard
from keyboards.inline.markup import cart_plus_minus_markup, cart_callback, chef_yes_or_no_markup, chef_return_markup, chef_return_delivery_markup, language_markup
from services.database.sql import check_user, check_cart_empty, get_food_by_id, update_count_cart, delete_food_cart, clean_cart, update_delivery_type, get_branches, get_chef_by_branch, create_order, create_order_items, get_last_order
from states.states import Cart, Register

def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1

    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2
    c = 2 * math.asin(math.sqrt(a))
    return R * c

def get_closest_branch(user_lat, user_lon, branches):
    closest = None
    min_distance = float('inf')

    for branch in branches:
        branch_lat = branch[1]
        branch_lon = branch[2]
        distance = calculate_distance(user_lat, user_lon, branch_lat, branch_lon)
        if distance < min_distance:
            min_distance = distance
            closest = branch

    return closest, min_distance

@dp.message_handler(lambda x: x.text in ["üõí Savatcham", "üõí –ö–æ—Ä–∑–∏–Ω–∫–∞"])
async def cart_handler(message: types.Message):
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    if user:
        lang = user[2]
        await message.delete()
        cart = db.execute(check_cart_empty, (message.from_user.id,),fetchall=True)
        if lang == 'uz':
            if cart:
                answer = ""
                price = 0
                for cart_item in cart:
                    food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                    answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
                    price += food[6] * cart_item[3]
                answer += f"\nJami: {price}"
                await message.answer(text="üõí Savatcha", reply_markup=cart_markup(uz))
                await message.answer(answer, reply_markup=cart_plus_minus_markup(uz, cart, get_food_by_id))
                await Cart.step_one.set()
            else:
                await message.answer('üõí Savatcha bo\'sh!', reply_markup=menu_markup(uz))
        else:
            if cart:
                answer = ""
                price = 0
                for cart_item in cart:
                    food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                    answer += f"{food[3]} ----- {cart_item[3]} —à—Ç. ----- {food[6] * cart_item[3]} —Å—É–º\n"
                    price += food[6] * cart_item[3]
                answer += f"\n–í—Å–µ–≥–æ: {price}"
                await message.answer(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", reply_markup=cart_markup(ru))
                await message.answer(answer, reply_markup=cart_plus_minus_markup(ru, cart, get_food_by_id))
                await Cart.step_one.set()
            else:
                await message.answer('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=menu_markup(ru))
    else:
        answer = f"""
Assalomu alaykum <b>{message.from_user.first_name}</b>, men Milliy Mangal Botman.
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>, —è Mangal Burger Bot.

Tilni tanlag!
–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!
    """
        await message.answer(text=answer, reply_markup=language_markup)
        await Register.lang.set()

@dp.callback_query_handler(cart_callback.filter(), state=Cart.step_one)
async def plus_minus_handler(callback: types.CallbackQuery, callback_data: dict):
    action = callback_data['action']
    lang = callback_data['lang']
    food_id = callback_data['food_id']
    count = int(callback_data['count'])
    
    food = db.execute(get_food_by_id, (food_id, ), fetchone=True)
    if action == 'name':
        if lang == uz:
            await callback.answer(food[2])
        else:
            await callback.answer(food[3])
    elif action == 'count':
        await callback.answer(str(count))
    elif action == 'plus':
        count += 1
        db.execute(update_count_cart, (count, callback.from_user.id, food_id), commit=True)
        cart = db.execute(check_cart_empty, (callback.from_user.id,),fetchall=True)
        if lang == uz:
            answer = ""
            price = 0
            for cart_item in cart:
                food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
                price += food[6] * cart_item[3]
            answer += f"\nJami: {price}"
            await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(uz, cart, get_food_by_id))
            await Cart.step_one.set()
        else:
            answer = ""
            price = 0
            for cart_item in cart:
                food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                answer += f"{food[3]} ----- {cart_item[3]} —à—Ç. ----- {food[6] * cart_item[3]} —Å—É–º\n"
                price += food[6] * cart_item[3]
            answer += f"\n–í—Å–µ–≥–æ: {price}"
            await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(ru, cart, get_food_by_id))
            await Cart.step_one.set()
    elif action == "minus":
        if count > 1:
            count -= 1
            db.execute(update_count_cart, (count, callback.from_user.id, food_id), commit=True)
            cart = db.execute(check_cart_empty, (callback.from_user.id,),fetchall=True)
            if lang == uz:
                answer = ""
                price = 0
                for cart_item in cart:
                    food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                    answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
                    price += food[6] * cart_item[3]
                answer += f"\nJami: {price}"
                await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(uz, cart, get_food_by_id))
                await Cart.step_one.set()
            else:
                answer = ""
                price = 0
                for cart_item in cart:
                    food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                    answer += f"{food[3]} ----- {cart_item[3]} —à—Ç. ----- {food[6] * cart_item[3]} —Å—É–º\n"
                    price += food[6] * cart_item[3]
                answer += f"\n–í—Å–µ–≥–æ: {price}"
                await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(ru, cart, get_food_by_id))
                await Cart.step_one.set()
        else:
            db.execute(delete_food_cart, (callback.from_user.id, food_id), commit=True)
            cart = db.execute(check_cart_empty, (callback.from_user.id,),fetchall=True)
            if lang == uz:
                if cart:
                    answer = ""
                    price = 0
                    for cart_item in cart:
                        food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                        answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
                        price += food[6] * cart_item[3]
                    answer += f"\nJami: {price}"
                    await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(uz, cart, get_food_by_id))
                    await Cart.step_one.set()
                else:
                    await callback.message.delete()
                    await callback.message.answer('üõí Savatcha bo\'sh!', reply_markup=menu_markup(uz))
            else:
                if cart:
                    answer = ""
                    price = 0
                    for cart_item in cart:
                        food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                        answer += f"{food[3]} ----- {cart_item[3]} —à—Ç. ----- {food[6] * cart_item[3]} —Å—É–º\n"
                        price += food[6] * cart_item[3]
                    answer += f"\n–í—Å–µ–≥–æ: {price}"
                    await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(ru, cart, get_food_by_id))
                    await Cart.step_one.set()
                else:
                    await callback.message.delete()
                    await callback.message.answer('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=menu_markup(ru))
    elif action == 'remove':
        db.execute(delete_food_cart, (callback.from_user.id, food_id), commit=True)
        cart = db.execute(check_cart_empty, (callback.from_user.id,),fetchall=True)
        if lang == uz:
            if cart:
                answer = ""
                price = 0
                for cart_item in cart:
                    food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                    answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
                    price += food[6] * cart_item[3]
                answer += f"\nJami: {price}"
                await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(uz, cart, get_food_by_id))
                await Cart.step_one.set()
            else:
                await callback.message.delete()
                await callback.message.answer('üõí Savatcha bo\'sh!', reply_markup=menu_markup(uz))
        else:
            if cart:
                answer = ""
                price = 0
                for cart_item in cart:
                    food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
                    answer += f"{food[3]} ----- {cart_item[3]} —à—Ç. ----- {food[6] * cart_item[3]} —Å—É–º\n"
                    price += food[6] * cart_item[3]
                answer += f"\n–í—Å–µ–≥–æ: {price}"
                await callback.message.edit_text(answer, reply_markup=cart_plus_minus_markup(ru, cart, get_food_by_id))
                await Cart.step_one.set()
            else:
                await callback.message.delete()
                await callback.message.answer('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=menu_markup(ru))

@dp.message_handler(text=back_uz, state=Cart.step_one)
@dp.message_handler(text=back_ru, state=Cart.step_one)
async def back_main_handler(message: types.Message, state: FSMContext):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    
    if lang == 'uz':
        await message.answer('Menyu', reply_markup=menu_markup(uz))
    else:
        await message.answer('–ú–µ–Ω—é', reply_markup=menu_markup(ru))
    await state.finish()

@dp.message_handler(text="üõí Savatni tozalash", state=Cart.step_one)
@dp.message_handler(text="üõí –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", state=Cart.step_one)
async def clean_cart_handler(message: types.Message, state: FSMContext):
    db.execute(clean_cart, (message.from_user.id, ), commit=True)
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    
    if lang == 'uz':
        await message.answer('üóëÔ∏è Tozalandi')
        await message.answer('Menyu', reply_markup=menu_markup(uz))
    else:
        await message.answer('üóëÔ∏è –û—á–∏—Å—Ç–µ–Ω–∞')
        await message.answer('–ú–µ–Ω—é', reply_markup=menu_markup(ru))
    await state.finish()

@dp.message_handler(text="üì≤ Buyurtma berish", state=Cart.step_one)
@dp.message_handler(text="üì≤ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", state=Cart.step_one)
async def order_handler(message: types.Message):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    
    cart = db.execute(check_cart_empty, (message.from_user.id,),fetchall=True)
    if lang == 'uz':
        if cart[0][4] == 'delivery':
            await message.answer("Buyurtma turi: üöö Yetkazib berish\nTo'grimi?", reply_markup=correct_delivery_markup(uz))
        else:
            await message.answer("Buyurtma turi: üö∂‚Äç‚ôÇÔ∏è Olib ketish\nTo'grimi?", reply_markup=correct_delivery_markup(uz))
    else:
        if cart[0][4] == 'delivery':
            await message.answer("–¢–∏–ø –∑–∞–∫–∞–∑–∞: üöö –î–æ—Å—Ç–∞–≤–∫–∞\n–í–µ—Ä–Ω–æ?", reply_markup=correct_delivery_markup(ru))
        else:
            await message.answer("–¢–∏–ø –∑–∞–∫–∞–∑–∞: üö∂‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑\n–í–µ—Ä–Ω–æ?", reply_markup=correct_delivery_markup(ru))
    await Cart.delivery.set()

@dp.message_handler(lambda x: x.text in ['‚úÖ Ha', '‚úÖ –î–∞'], state=Cart.delivery)
async def yes_handler(message: types.Message):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]

    if lang == 'uz':
        await message.answer("O'z joylashuvingizni yuboring", reply_markup=location_markup(uz))
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=location_markup(ru))
    await Cart.location.set()

@dp.message_handler(lambda x: x.text in [back_uz, back_ru], state=Cart.delivery)
async def back_handler(message: types.Message, state: FSMContext):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]

    if lang == 'uz':
         await message.answer("Menyu", reply_markup=menu_markup(uz))
    else:
        await message.answer('–ú–µ–Ω—é', reply_markup=menu_markup(ru))
    await state.finish()

@dp.message_handler(lambda x: x.text in ["üü† O'zgartirish", "üü† –ò–∑–º–µ–Ω–∏—Ç—å"], state=Cart.delivery)
async def delivery_handler(message: types.Message):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]

    if lang == 'uz':
        await message.answer('Buyurtma qilish turini tanlang!', reply_markup=delivery_or_pick_up_markup(uz))
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞!', reply_markup=delivery_or_pick_up_markup(ru))
    await Cart.set_delivery.set()

@dp.message_handler(lambda x: x.text in [back_uz, back_ru, '‚ùå Yo\'q', '‚ùå –ù–µ—Ç'], state=Cart.yes_or_no)
@dp.message_handler(lambda x: x.text in [back_uz, back_ru], state=Cart.buy)
@dp.message_handler(lambda x: x.text in [back_uz, back_ru], state=Cart.card)
@dp.message_handler(lambda x: x.text in [back_uz, back_ru], state=Cart.location)
@dp.message_handler(lambda x: x.text in [back_uz, back_ru], state=Cart.set_delivery)
async def back_handler(message: types.Message, state: FSMContext):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]

    if lang == 'uz':
         await message.answer("Menyu", reply_markup=menu_markup(uz))
    else:
        await message.answer('–ú–µ–Ω—é', reply_markup=menu_markup(ru))
    await state.finish()


@dp.message_handler(lambda x: x.text in ["üöö Yetkazib berish", "üö∂‚Äç‚ôÇÔ∏è Olib ketish", "üöö –î–æ—Å—Ç–∞–≤–∫–∞", "üö∂‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑"], state=Cart.set_delivery)
async def delivery_or_pick_up_handler(message: types.Message, state: FSMContext):
    if message.text in ["üöö Yetkazib berish", "üöö –î–æ—Å—Ç–∞–≤–∫–∞"]:
        db.execute(update_delivery_type, ('delivery', message.from_user.id), commit=True)
    else:
        db.execute(update_delivery_type, ('pick_up', message.from_user.id), commit=True)
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    if lang == 'uz':
        await message.answer("O'z joylashuvingizni yuboring", reply_markup=location_markup(uz))
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=location_markup(ru))
    await Cart.location.set()

@dp.message_handler(content_types=types.ContentType.LOCATION, state=Cart.location)
async def location_handler(message: types.Message, state: FSMContext):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    latitude = message.location.latitude
    longitude = message.location.longitude
    cart = db.execute(check_cart_empty, (message.from_user.id, ), fetchall=True)
    
    delivery_type = cart[0][4]
    price = 0
    for cart_item in cart:
        food = db.execute(get_food_by_id, (cart_item[2], ), fetchone=True)
        price += int(food[6])
    branches = db.execute(get_branches, fetchall=True)
    closest_branch, distance = get_closest_branch(latitude, longitude, branches)
    await state.update_data(closest_branch=closest_branch)
    await state.update_data(latitude=latitude)
    await state.update_data(longitude=longitude)
    if lang == 'uz':
        answer = f"Jami narx: {price} so'm bo'ldi"
        if delivery_type == 'delivery':
            if distance < 3:
                answer += "\nYetkazib berish xizmati uchun esa yana 10 000 so'm qo'shiladi."
            elif 3 < distance < 5:
                answer += "\nYetkazib berish xizmati uchun esa yana 15 000 so'm qo'shiladi."
            elif 5 < distance < 13:
                answer += "\nYetkazib berish xizmati uchun esa yana 30 000 so'm qo'shiladi."
            else:
                answer += "\nYetkazib berish xizmati uchun esa yana 30 000 so'm + (kelishiladi) qo'shiladi."
            await message.answer(answer)
        else:
            text = f"""
üè¢ Eng yaqin filial:
üìç Nomi: {closest_branch[3]}
üïí Ish vaqti: {closest_branch[4]}
üìè Masofa: {distance:.2f} km"""
            await message.answer(answer)
            await message.answer(text)
            await message.answer_location(closest_branch[1], closest_branch[2] )
        await message.answer("To'lov turini tanlang!", reply_markup=buy_markup(uz))
    else:
        answer = f"–û–±—â–∞—è —Ü–µ–Ω–∞: {price} —Å—É–º"
        if delivery_type == 'delivery':
            if distance < 3:
                answer += "\n–ï—â–µ 10 000 —Å—É–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É."
            elif 3 < distance < 5:
                answer += "\n–ï—â–µ 15 000 —Å—É–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É."
            elif 5 < distance < 13:
                answer += "\n–ï—â–µ 30 000 —Å—É–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É."
            else:
                answer += "\n–ó–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ 30 000 —Å—É–º + (–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è)."
            await message.answer(answer)
        else:
            text = f"""
üè¢ –ë–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª:
üìç –ò–º—è: {closest_branch[3]}
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {closest_branch[4]}
üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} km"""
            await message.answer(answer)
            await message.answer(text)
            await message.answer_location(closest_branch[1], closest_branch[2])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!", reply_markup=buy_markup(ru))
    await Cart.buy.set()

@dp.message_handler(lambda x: x.text in ["üíµ Naqd to'lov", "üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏"], state=Cart.buy)
async def cash_handler(message: types.Message):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    if lang == 'uz':
        await message.answer('Haqiqatan ham buyurtma berasizmi?', reply_markup=yes_or_no_markup(uz))
    else:
        await message.answer('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ?', reply_markup=yes_or_no_markup(ru))
    await Cart.yes_or_no.set()

@dp.message_handler(lambda x: x.text in ['‚úÖ Ha', '‚úÖ –î–∞'], state=Cart.yes_or_no)
async def yes_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    branch = data.get('closest_branch')
    latitude = data.get('latitude')
    longitude = data.get('longitude')
    cart = db.execute(check_cart_empty, (message.from_user.id, ), fetchall=True)
    chef = db.execute(get_chef_by_branch, (branch[0], ), fetchone=True)
    
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    
    db.execute(create_order, (message.from_user.id, latitude, longitude, False), commit=True)
    order = db.execute(get_last_order, (message.from_user.id, ), fetchone=True)
    answer = "üÜï Yangi buyurtma\n\n"
    price = 0
    for cart_item in cart:
        food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
        answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
        price += food[6] * cart_item[3]
        db.execute(create_order_items, (order[0], food[0], cart_item[3]), commit=True)
    answer += f"\nJami: {price}\n\nüë§ Buyurtma oluvchi ismi: {user[4]}\nüì± Telefon raqami: {user[3]}"

    db.execute(clean_cart, (message.from_user.id, ), commit=True)
    
    if cart[0][4] == 'delivery':
        answer += f"\nBuyurtma turi: üöö Yetkazib berish\nQabul qilasizmi?"
        await bot2.send_message(chat_id=chef[1], text=answer, reply_markup=chef_return_delivery_markup(message.from_user.id, 'delivery'))
    else:
        answer += f"\nBuyurtma turi: üö∂‚Äç‚ôÇÔ∏è Olib ketish"
        await bot2.send_message(chat_id=chef[1], text=answer, reply_markup=chef_return_markup(message.from_user.id))
    
    await message.delete()
    
    if lang == 'uz':
        await message.answer('Qabul qilindi!')
        await message.answer("Esingizdan chiqmasin, buyurtmani olishda ismingizni va telefon raqamingizni aytishni unitmang!")
        await message.answer("Menyu", reply_markup=menu_markup(uz))
    else:
        await message.answer("–ü—Ä–∏–Ω—è—Ç–∞!")
        await message.answer("–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!")
        await message.answer("–ú–µ–Ω—é", reply_markup=menu_markup(ru))
    await state.finish()

@dp.message_handler(lambda x: x.text in ['üí≥ Karta orqali', 'üí≥ –ö–∞—Ä—Ç–æ–π'], state=Cart.buy)
async def card_handler(message: types.Message):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    price = 0
    cart = db.execute(check_cart_empty, (message.from_user.id, ), fetchall=True)
    delivery_type = ""
    for cart_item in cart:
        food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
        delivery_type = food[4]
        price += food[6] * cart_item[3]
    if lang == 'uz':
        await message.answer(f'5614 6822 1102 7356\n\nShu karta raqamiga {price} so\'m pul tashlang!\nTo\'lov to\'g\'riligini bilishimiz uchun to\'lov rasmini yuboring', reply_markup=back_markup(uz))
        if delivery_type == 'delivery':
            await message.answer('Esingizdan chiqmasin yetkazib berish uchun yana 30000 so\'m + naqd pul to\'aysiz')
    else:
        await message.answer(f'5614 6822 1102 7356\n\n–û–ø–ª–∞—Ç–∏—Ç–µ {price} —Å—É–º –∫ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.', reply_markup=back_markup(ru))
        if delivery_type == 'delivery':
            await message.answer('–ù–µ –∑–∞–±—É–¥—å—Ç–µ, –≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ –µ—â–µ 30 000 —Å—É–º + –Ω–∞–ª–∏—á–Ω—ã–µ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É.')
    await Cart.card.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Cart.card)
async def check_photo_handler(message: types.Message, state: FSMContext):
    await message.delete()
    user = db.execute(check_user, (message.from_user.id, ), fetchone=True)
    lang = user[2]
    data = await state.get_data()
    latitude = data.get('latitude')
    longitude = data.get('longitude')
    branch = data.get('closest_branch')
    chef = db.execute(get_chef_by_branch, (branch[0], ), fetchone=True)
    cart = db.execute(check_cart_empty, (message.from_user.id, ), fetchall=True)
    answer = "üÜï Yangi buyurtma\n\n"
    price = 0
    for cart_item in cart:
        food = db.execute(get_food_by_id, (cart_item[2],), fetchone=True)
        answer += f"{food[2]} ----- {cart_item[3]} ta ----- {food[6] * cart_item[3]} so'm\n"
        price += food[6] * cart_item[3]
    answer += f"\nJami: {price}\n\nüë§ Buyurtma oluvchi ismi: {user[4]}\nüì± Telefon raqami: {user[3]}"
    if cart[0][4] == 'delivery':
        answer += f"\nBuyurtma turi: üöö Yetkazib berish\nQabul qilasizmi?"
    else:
        answer += f"\nBuyurtma turi: üö∂‚Äç‚ôÇÔ∏è Olib ketish"
    answer += "\nTo'lov to'g'ri qilinganmi?"
    file = await bot.get_file(message.photo[-1].file_id)
    file_path = file.file_path

    filename = f"{message.photo[-1].file_id}.jpg"
    destination_path = f"photos/{filename}"
    os.makedirs(os.path.dirname(destination_path), exist_ok=True)

    await bot.download_file(file_path, destination_path)

    with open(destination_path, 'rb') as photo_file:
        await bot2.send_photo(
            chat_id=chef[1],
            photo=photo_file,
            caption=answer,
            reply_markup=chef_yes_or_no_markup(user[0], latitude, longitude)
        )

    os.remove(destination_path)

    if lang == 'uz':
        await message.answer("üïë To'lov tekshirilmoqda biroz kutib turing!", reply_markup=remove_keyboard)
    else:
        await message.answer("üïë –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!", reply_markup=remove_keyboard)
        